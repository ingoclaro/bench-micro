#!/usr/bin/env ruby

require './sh/support/allocation_benchmarker'

results = Dir['apps/*.ru'].map do |file|
  tracker = AllocationsBenchmarker.new(file)
  tracker.human_output
  Object.send(:remove_const, :APP)
  Object.send(:remove_const, :HelloWorld) if Object.constants.include?(:HelloWorld)
  Object.send(:remove_const, :HelloController) if Object.constants.include?(:HelloController)
  tracker.machine_result
end

def table_header(a,b,c)
  "| #{a.ljust(20)} | #{b.to_s.ljust(12)} | #{c.to_s.ljust(12)} |"
end

def table_row(a,b,c)
  "| #{a.ljust(20)} | #{b.to_s.rjust(12)} | #{c.to_s.rjust(12)} |"
end

sorted = results.sort_by{|x| x[:total_allocations]}
table = sorted.map do |res|
  name        = res[:frameworkname].downcase
  allocations = res[:total_allocations]
  memory      = res[:total_memsize]
  table_row(name, allocations, memory)
end.join("\n")

puts "*"*80
puts "SUMMARY:"

summary = []
summary << table_header("Framework", "Tot. alloc.", 'Tot. mem.')
summary << table_header(":------------", "-----:", '-----:')
summary << table
File.open('results/memory.txt', 'w') do |f|
  f.puts summary.join("\n")
end
puts summary